package com.simba.gaode.model.enums;

/**
 * 驾车选择策略
 * 
 * 下方10~20的策略，会返回多条路径规划结果。（高德地图APP策略也包含在内，强烈建议从此策略之中选择） 下方策略
 * 0~9的策略，仅会返回一条路径规划结果。
 * 
 * @author caozhejun
 *
 */
public enum DriveStrategy {

	TEN("10", "返回结果会躲避拥堵，路程较短，尽量缩短时间，与高德地图的默认策略也就是不进行任何勾选一致"),

	ELEVEN("11", "返回三个结果包含：时间最短；距离最短；躲避拥堵 （由于有更优秀的算法，建议用10代替）"),

	TWELVE("12", "返回的结果考虑路况，尽量躲避拥堵而规划路径，与高德地图的“躲避拥堵”策略一致"),

	THIRTEEN("13", "返回的结果不走高速，与高德地图“不走高速”策略一致"),

	FOURTEEN("14", "返回的结果尽可能规划收费较低甚至免费的路径，与高德地图“避免收费”策略一致"),

	FIFTEEN("15", "返回的结果考虑路况，尽量躲避拥堵而规划路径，并且不走高速，与高德地图的“躲避拥堵&不走高速”策略一致"),

	SIXTEEN("16", "返回的结果尽量不走高速，并且尽量规划收费较低甚至免费的路径结果，与高德地图的“避免收费&不走高速”策略一致"),

	SEVENTEEN("17", "返回路径规划结果会尽量的躲避拥堵，并且规划收费较低甚至免费的路径结果，与高德地图的“躲避拥堵&避免收费”策略一致"),

	EIGHTTEEN("18", "返回的结果尽量躲避拥堵，规划收费较低甚至免费的路径结果，并且尽量不走高速路，与高德地图的“避免拥堵&避免收费&不走高速”策略一致"),

	NINETEEN("19", "返回的结果会优先选择高速路，与高德地图的“高速优先”策略一致"),

	TWENTY("20", "返回的结果会优先考虑高速路，并且会考虑路况躲避拥堵，与高德地图的“躲避拥堵&高速优先”策略一致"),

	ZERO("0", "不考虑当时路况，返回耗时最短的路线，但是此路线不一定距离最短"),

	ONE("1", "不走收费路段，且耗时最少的路线"),

	TWO("2", "不考虑路况，仅走距离最短的路线，但是可能存在穿越小路/小区的情况"),

	THREE("3", "不走快速路，例如京通快速路（因为策略迭代，建议使用13）"),

	FOUR("4", "躲避拥堵的路线，但是可能会存在绕路的情况，耗时可能较长"),

	FIVE("5", "多策略（同时使用速度优先、费用优先、距离优先三个策略计算路径）,其中必须说明，就算使用三个策略算路，会根据路况不固定的返回一~三条路径规划信息"),

	SIX("6", "不走高速，但是不排除走其余收费路段"),

	SEVEN("7", "不走高速且避免所有收费路段"),

	EIGHT("8", "躲避收费和拥堵，可能存在走高速的情况，并且考虑路况不走拥堵路线，但有可能存在绕路和时间较长"),

	NINE("9", "不走高速且躲避收费和拥堵");

	private String name;

	private String description;

	public String getName() {
		return name;
	}

	public String getDescription() {
		return description;
	}

	private DriveStrategy(String name, String description) {
		this.name = name;
		this.description = description;
	}

}
